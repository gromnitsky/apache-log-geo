#!/usr/bin/env ruby

require 'optparse'
require_relative 'lib'
include ApacheLogGeo

class FMT
  def initialize input, geo
    @input = input; @geo = geo
    @errors = 0
  end
  attr_accessor :errors

  def shell                     # print only the 1st entry
    require 'shellwords'
    ip = @input.to_enum.next.split.first
    r = ["ip=#{ip.shellescape}"]

    info = @geo.get ip
    if !info
      r << "error=#{@errors += 1}"
    else
      r += info.map do |k,v|
        "#{k}=#{(v.is_a?(Array) ? v.join(',') : v.to_s).shellescape}"
      end
    end
    r.join "\n"
  end

  def json
    require 'json'
    trans = -> (ip) do
      r = {ip: ip}
      info = @geo.get ip
      info ? r.merge(info) : r.merge({error: @errors += 1})
    end

    if @input.is_a?(IO)      # stdin, in which we expect an apache log
      @input.map { |line| trans.call line.split[0] }.to_json
    else                     # argv
      @input.map do |list|
        list.split.map { |ip| trans.call ip }
      end.flatten.to_json
    end
  end
end


opt = {
  db: geo_db_location,
  fmt: 'json'
}

OptionParser.new do |o|
  o.banner = "Usage: #{File.basename $0} [-d GeoLite2-City.mmdb] [-f fmt] ip..."
  o.on("-d path", "maxmind db file") { |v| opt[:db] = v }
  o.on("-f fmt", "output format: json, shell") { |v| opt[:fmt] = v }
end.parse!

begin
  geo = GeoDB.new opt[:db]
rescue
  errx 2, $!
end

fmt = FMT.new (ARGV.size > 0 ? ARGV : $stdin), geo
puts fmt.send opt[:fmt]
exit fmt.errors > 0 ? 1 : 0
